{"version":3,"sources":["app_components/weather.component.js","app_components/form.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Weather","props","className","city","weathericon","temp_celsius","min","max","minmaxTemp","temp_min","temp_max","description","Form","error","role","onSubmit","loadweather","type","name","autoComplete","placeholder","App","getWeather","e","a","preventDefault","target","elements","value","country","fetch","api_call","json","response","console","log","setState","sys","celsius","calCelsius","main","temp","weather","get_WeatherIcon","id","state","undefined","icon","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","Math","floor","icons","rangeId","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.cec2259e.chunk.js","sourcesContent":["import React from 'react';\n\nconst Weather = (props) => {\n\treturn (\n\t<div className=\"container text-light\">\n\t\t<div className=\"cards pt-4\">\n\t\t\t<h1>\n\t\t\t\t{props.city}\n\t\t\t</h1>\n\t\t\t<h5 className=\"py-4\">\n\t\t\t\t<i className={`wi ${props.weathericon} display-1 `}></i>\n\t\t\t</h5>\n\t\t\t{props.temp_celsius?(<h1 className=\"py-2\"> {props.temp_celsius}&deg;</h1>):null}\n\t\t\t{/** show min and max Temp */}\n\t\t\t{minmaxTemp(props.temp_min,props.temp_max )}\n\t\t\t<h4 className=\"py-3\">{props.description}</h4>\n\t\t</div>\n\t</div>\n\t);\n}\n\nfunction minmaxTemp(min,max){\n\tif(min && max){\n\t\treturn(\n\t\t\t\t<h3>\n\t\t<span className=\"px-4\">{min}&deg;</span>\n\t\t<span className=\"px-4\">{max}&deg;</span>\n\t</h3>\n\t\t);\n\t}\n}\n\nexport default Weather;","import React from 'react';\nimport \"./form.style.css\";\n\nconst Form = props =>{\n\treturn(\n\t\t<div className=\"container\">\n\t\t\t<div>{props.error?error():null}</div>\n\t\t\t<form onSubmit={props.loadweather}>\n\t\t\t\t<div className=\"row\">\n\t\t\t\t<div className=\"col-md-3 offset-md-2\">\n\t\t\t\t\t<input \n\t\t\t\t\t\ttype=\"text\" \n\t\t\t\t\t\tclassName=\"form-control\"                                 name=\"city\"\n\t\t\t\t\t\tautoComplete=\"off\"\n\t\t\t\t\t\tplaceholder=\"City\"\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"col-md-3\">\n\t\t\t\t\t<input \n\t\t\t\t\t\ttype=\"text\" \n\t\t\t\t\t\tclassName=\"form-control\"                                 name=\"country\"                                           autoComplete=\"off\"\n\t\t\t\t\t\tplaceholder=\"Country\"\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"col-md-3 mt-md-0 py-2 text-md-left\">\n\t\t\t\t\t<button className=\"btn btn-warning\">Get Weather</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t</form>\n\t\t</div>\n\t);\n};\n\nfunction error(){\n\treturn(\n\t<div className=\"alert alert-danger mx-5\" role=\"alert\">\n\t\t\tPlease Enter City and Country\n\t\t</div>\n\t);\n}\n\nexport default Form;","import React from 'react';\nimport './App.css';\nimport \"weather-icons/css/weather-icons.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Weather from './app_components/weather.component';\nimport Form from \"./app_components/form.component\";\n//\nconst API_KEY=\"1414d467eb4d06be43b1ce9710c22c67\";\nclass App extends React.Component{\n\tconstructor(){\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tcity: undefined,\n\t\t\tcountry: undefined,\n\t\t\ticon: undefined,\n\t\t\tmain: undefined,\n\t\t\tcelsius: undefined,\n\t\t\ttemp_max: undefined,\n\t\t\ttemp_min: undefined,\n\t\t\tdescription: \"\",\n\t\t\terror: false\n\t\t};\n\t\t\n\t\tthis.weathericon ={\n\t\t\tThunderstorm: 'wi-thunderstorm',\n\t\t\tDrizzle: \"wi-sleet\",\n\t\t\tRain: \"wi-storm-shower\",\n\t\t\tSnow: \"wi-snow\",\n\t\t\tAtmosphere: \"wi-fog\",\n\t\t\tClear: \"wi-day-sunny\",\n\t\t\tClouds: \"wi-day-fog\"\n\t\t}\n\t}\n\t\n\t\n\tcalCelsius(temp){\n\t\tlet cell = Math.floor(temp-273.15);\n\t\treturn cell;\n\t}\n\t\n\tget_WeatherIcon(icons, rangeId){\n\t\tswitch(true){\n\t\t\tcase rangeId >=200 && rangeId<=232:\n\t\t\t\tthis.setState({icon:this.weathericon.Thunderstorm});\n\t\t\t\tbreak;\n\t\t\tcase rangeId >=300 && rangeId<=321:\n\t\t\t\tthis.setState({icon:this.weathericon.Drizzle});\n\t\t\t\tbreak;\n\t\t\tcase rangeId >=500 && rangeId<=531:\n\t\t\t\tthis.setState({icon:this.weathericon.Rain});\n\t\t\t\tbreak;\n\t\t\tcase rangeId >=600 && rangeId<=622:\n\t\t\t\tthis.setState({icon:this.weathericon.Snow});\n\t\t\t\tbreak;\n\t\t\tcase rangeId >=701 && rangeId<=781:\n\t\t\t\tthis.setState({icon:this.weathericon.Atmosphere});\n\t\t\t\tbreak;\n\t\t\tcase rangeId === 800:\n\t\t\t\tthis.setState({icon:this.weathericon.Clear});\n\t\t\t\tbreak;\n\t\t\tcase rangeId >=801 && rangeId<=804:\n\t\t\t\tthis.setState({icon:this.weathericon.Clouds});\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthis.setState({icon:this.weathericon.Clouds});\n\t\t}\n\t}\n\t\n\tgetWeather = async (e) =>{\n\t\te.preventDefault();\n\t\t\n\t\tconst city= e.target.elements.city.value;\n\t\tconst country= e.target.elements.country.value;\n\t\t\n\t\tif(city && country){\n\t\t   const api_call= await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}`);\n\t\n\t\tconst response =await api_call.json();\n\t\tconsole.log(response);\n\t\t\n\t\tthis.setState({\n\t\t\tcity: `${response.name}, ${response.sys.country}`,\n\t\t\tcountry: response.sys.country,\n\t\t\tcelsius: this.calCelsius(response.main.temp),\n\t\t\ttemp_max: this.calCelsius(response.main.temp_max),\n\t\t\ttemp_min: this.calCelsius(response.main.temp_min),\n\t\t\tdescription: response.weather[0].description,\n\t\t\terror: false\n\t\t});\n\t\tthis.get_WeatherIcon(this.weathericon, response.weather[0].id);\n\t\t   }else{\n\t\t\t   this.setState({error:true});\n\t\t   }\n\t\n\t}\n\t\n\trender(){\n\t\treturn( \n\t\t  <div className=\"App\">\n\t\t\t<Form loadweather={this.getWeather} error={this.state.error}/>\n    \t<Weather \n\t\t\tcity={this.state.city}\n\t\t\tcountry={this.state.country}\n\t\t\ttemp_celsius={this.state.celsius}\n\t\t\ttemp_max={this.state.temp_max}\n\t\t\ttemp_min={this.state.temp_min} \n\t\t\tdescription={this.state.description}\n\t\t\tweathericon={this.state.icon}\n\t\t/> \n    </div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}